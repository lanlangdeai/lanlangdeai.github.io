{"./":{"url":"./","title":"简介","keywords":"","body":"1.1. Introduction1.1. Introduction lanlangdeai            updated 2021-05-18 10:00:19 "},"php/php.html":{"url":"php/php.html","title":"PHP","keywords":"","body":" lanlangdeai            updated 2021-05-19 17:30:46 "},"php/functions.html":{"url":"php/functions.html","title":"常用方法","keywords":"","body":"1.2.1. 常用方法&函数1.2.1.1. 函数1.2.1.2. 方法1.2.1.2.1. ** 数组 **1.2.1.2.2. * 字符串 *1.2.1.2.3. * 验证类 *1.2.1.2.4. * 数据导出类 *1.2.1.2.5. * 计算类 *1.2.1.2.6. * 时间日期类 *1.2.1. 常用方法&函数 1.2.1.1. 函数 base_convert 在任意进制之间转换数字 详见：https://www.php.net/manual/zh/function.base-convert.php base_convert ( string $number , int $frombase , int $tobase ) : string 返回一字符串，包含 number 以 tobase 进制的表示。number 本身的进制由 frombase 指定。frombase 和 tobase 都只能在 2 和 36 之间（包括 2 和 36）。高于十进制的数字用字母 a-z 表示，例如 a 表示 10，b 表示 11 以及 z 表示 35。 示例： $hexadecimal = 'A37334'; echo base_convert($hexadecimal, 16, 2); >>> 101000110111001100110100 1.2.1.2. 方法 1.2.1.2.1. ** 数组 ** 从二维数组中取出key /** * 从二维数组中取出自己要的KEY值(去除为空字符并根据结果排序) * @param array $arrData * @param string $key * @param $im true 返回逗号分隔 * @return array */ function filter_value($arrData, $key, $im = false) { $re = []; foreach ($arrData as $k => $v) { if (isset($v[$key])) $re[] = $v[$key]; } if (!empty($re)) { $re = array_flip(array_flip($re)); sort($re); } return $im ? implode(',', $re) : $re; } 多维数组合并（同样维度的数组合并） /** * 多维数组合并（支持多数组） * @return array */ function array_merge_multi() { $args = func_get_args(); $array = []; foreach ($args as $arg) { if (is_array($arg)) { foreach ($arg as $k => $v) { if (is_array($v)) { $array[$k] = isset($array[$k]) ? $array[$k] : []; $array[$k] = array_merge_multi($array[$k], $v); } else { $array[$k] = $v; } } } } return $array; } 将对象数据转换成数组 /** * 将对象数据转换成数据 * @param $object * @return array */ function objectToArray($object) { if(!is_array($object) && !is_object($object)){ return $object; } if( is_object($object) ){ $object = get_object_vars($object); } return array_map('objectToArray',$object); } 》》》 $data = ['name'=>'xing','age'=>20]; $obj = (object)$data; objectToArray($obj) >>> Array ( [name] => xing [age] => 20 ) 数组中数据求和（支持多维数组） /** * 数组中数据的求和（支持多维数组） * @param array $array * @return int|mixed */ function arraySum(array $array) { $total = 0; foreach(new RecursiveIteratorIterator( new RecursiveArrayIterator($array) ) as $num){ $total += $num; } return $total; } 》》》 $arr = [[11,22],33, [44,55,[66,77]]]; print_r(arraySum($arr)); >>> 308 将多维数组转化成一维数组（索引数组） function reduceArray($array) { $return = []; array_walk_recursive($array, function ($x) use (&$return) { $return[] = $x; }); return $return; } 》》》 $data = [ ['php','python','golang'], ['mysql','sqlite','mongodb','redis','Memcache'] ]; print_r(reduceArray($data)); >>> Array ( [0] => php [1] => python [2] => golang [3] => mysql [4] => sqlite [5] => mongodb [6] => redis [7] => Memcache ) 生成一定数量的不重复的随机数 /** * 生成一定数量的不重复随机数 * @param integer $min 最小值 * @param integer $max 最大值 * @param integer $num 随机数数量 * @return array 返回值 */ function generateUniqueRand(int $min, int $max,int $num) { $count = 0; $return = []; if(($max-$min+1)>>Array ( [0] => 7 [1] => 9 [2] => 8 [3] => 4 [4] => 5 [5] => 10 [6] => 1 [7] => 2 [8] => 6 [9] => 3 ) 提取数组中字段数据 /** * 过滤并获取有用数据 * @param array $data 原数据 * @param array $standard 保留的参数 */ function filterData($data, array $standard){ if(empty($data) || !is_array($data) || !is_array($standard)) return []; $standardArr = array_fill_keys($standard, ''); $data = array_intersect_key($data,$standardArr); return array_merge($standardArr,$data); } 》》》 $arr = ['name'=>'xing','age'=>23,'sex'=>1]; $standard = ['age']; $ret = filterData($arr, $standard); var_dump($ret); >>> array(1) { 'age' => int(23) } 1.2.1.2.2. * 字符串 * 格式化字节大小 /** * 格式化字节大小 * @param number $size 字节数 * @param string $delimiter 数字和单位分隔符 * @return string 格式化后的带单位的大小 */ function format_bytes($size, $delimiter = '') { $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']; for ($i = 0; $size >= 1024 && $i 生成一定长度的UUID /** * 生成一定长度的UUID * * @param int $length * * @return string */ function get_uuid($length = 16) { mt_srand((double)microtime()*10000); $uuid = sprintf('%04X%04X-%04X-%04X-%04X-%04X%04X%04X', mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(16384, 20479), mt_rand(32768, 49151), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)); $str = base64_encode($uuid); return substr($str, mt_rand(0, strlen($str) - $length), $length); } 过滤emoji表情特殊符号 /** * 过滤emoji表情 * $str 字符串 */ function filterEmoji($str) { $str = preg_replace_callback( '/./u', function (array $match) { return strlen($match[0]) >= 4 ? '' : $match[0]; }, $str); return $str; } 获取数据库分表 /** * 获取分表 * @param string $tableSuffix 表前缀 * @param string $code 字符串 * @param integer $size 表数量 * @return string 表名 */ function get_hash_table($tableSuffix,$code,$size=100) { $hash = sprintf(\"%u\", crc32($code)); $hash1 = intval(fmod($hash, $size)); return $tableSuffix.\"_\".$hash1; } 1.2.1.2.3. * 验证类 * 手机号验证 /** * 验证手机号 * 13[0-9],14[5,7],15[0,1,2,3,5,6,7,8,9],17[6,7,8],18[0-9],170[0-9] * 移动号段: 134,135,136,137,138,139,150,151,152,157,158,159,182,183,184,187,188,147,178,1705 * 联通号段: 130,131,132,155,156,185,186,145,176,1709 * 电信号段: 133,153,180,181,189,177,1700 */ public function checkMobile($mobile) { if(preg_match('/^1(3[0-9]|4[57]|5[0-35-9]|8[0-9]|7[0-9])\\\\d{8}$/', $mobile)){ return 1; } elseif(preg_match('/(^1(3[4-9]|4[7]|5[0-27-9]|7[8]|8[2-478])\\\\d{8}$)|(^1705\\\\d{7}$)/', $mobile)){ return 2; } elseif(preg_match('/(^1(3[0-2]|4[5]|5[56]|7[6]|8[56])\\\\d{8}$)|(^1709\\\\d{7}$)/', $mobile)){ return 3; } elseif(preg_match('/(^1(33|53|77|8[019])\\\\d{8}$)|(^1700\\\\d{7}$)/', $mobile)){ return 4; }else{ return 0; } } 验证时间是否正确和是否是零点 /** * 验证日期与是否是整点 * @param string 日期 * @param bool 整点验证 */ function validateDate($date,$isZero=false) { $timestamp = strtotime($date); if(false === $timestamp){ return false; } if($isZero){ $today = strtotime('today'); $interval = abs($timestamp - $today); if( !is_int($interval/(24*60*60) ) ){ return false; } } return $timestamp; } 判断是否在微信浏览器中 // 判断是否是微信浏览器 function isWechat() { return strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') !== false; } 判断PHP环境是否是cli // 判断PHP环境是否是cli function isCli() { return PHP_SAPI == 'cli'; } 判断当前环境是否是Windows function isWin() { return strncasecmp(PHP_OS,'win',3) === 0; } function isWin() { return strncasecmp(php_uname('s'),'win',3) === 0; } function isWin() { return DIRECTORY_SEPARATOR === chr(92); } function isWin() { return PATH_SEPARATOR === chr(59); } function isWin() { return strcasecmp(PHP_SHLIB_SUFFIX,'dll') === 0; } 判断数据是否为多维数组 /** * 判断数据是否为多维数组 * @param Array $data 数据 * @return Boolean 是/否 */ function isMultidimensionalArray(Array $data) { return count($data,1) === count($data); } 判断字符串中是否存在中文字符 function isExistChinese($char) { return preg_match(\"/[\\x{4e00}-\\x{9fa5}]+/u\",$char); // /([\\x81-\\xfe][\\x40-\\xfe])/ } 判断数据中是否有非法字符 function illegalCharacters($strOrArr) { $IllegalArr = [ '\"','\\'','\\\\','\\/','&','||','%','*','(',')', 'select','update','delete','insert','create','modify', ]; if(is_array($strOrArr)){ foreach($strOrArr as $str){ foreach($IllegalArr as $char){ if(strpos(strtolower($str), $char) !== false){ return false; } } } }else{ foreach($IllegalArr as $char){ if(strpos(strtolower($strOrArr), $char) !== false){ return false; } } } return true; } 判断是否是GIF图 function isGif($img) { $handle = fopen($img,'rb'); $img = fread($handle,'1024'); fclose($handle); return strpos($img,chr(0x21).chr(0xff).chr(0x0b).'NETSCAPE2.0') !== FALSE; } 判断Session是否开启 function isActived() { if( !isCli() ){ if( version_compare(phpversion(), '5.4.0', '>=') ){ return session_status() === PHP_SESSION_ACTIVE; }else{ return !empty( session_id() ); } } return false; } 验证IP地址是否正确 function checkIp( $ip ) { if ( empty( $ip ) ) return false; if ( ! preg_match( '#^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$#', $ip ) ) { return false; } $ip_array = explode( '.', $ip ); //真实的ip地址每个数字不能大于255（0-255） return ( $ip_array[0] 验证是否是HTTPS协议 function isHttps() { return ( isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on' ) || ( isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' ); } 判断文件是否存在（本地+远程） function isExistFile($file) { if($file){ if(stripos($file,'http') === 0){ $header = get_headers($file,1); return isset($header[0]) && ( strpos($header[0],'200') || strpos($header[0],'304') ) && stripos($header[0],'OK'); }else{ if( self::isExistChinese($file) ){ $file = iconv('UTF-8', 'GBK', $file); } return file_exists($file); } } return false; } 验证身份证号是否正确 function isCreditNo($vStr) { $vCity = array( '11','12','13','14','15','21','22', '23','31','32','33','34','35','36', '37','41','42','43','44','45','46', '50','51','52','53','54','61','62', '63','64','65','71','81','82','91' ); if (!preg_match('/^([\\d]{17}[xX\\d]|[\\d]{15})$/', $vStr)) return false; if (!in_array(substr($vStr, 0, 2), $vCity)) return false; $vStr = preg_replace('/[xX]$/i', 'a', $vStr); $vLength = strlen($vStr); if ($vLength == 18) { $vBirthday = substr($vStr, 6, 4) . '-' . substr($vStr, 10, 2) . '-' . substr($vStr, 12, 2); } else { $vBirthday = '19' . substr($vStr, 6, 2) . '-' . substr($vStr, 8, 2) . '-' . substr($vStr, 10, 2); } if (date('Y-m-d', strtotime($vBirthday)) != $vBirthday) return false; if ($vLength == 18) { $vSum = 0; for ($i = 17 ; $i >= 0 ; $i--) { $vSubStr = substr($vStr, 17 - $i, 1); $vSum += (pow(2, $i) % 11) * (($vSubStr == 'a') ? 10 : intval($vSubStr , 11)); } if($vSum % 11 != 1) return false; } return true; } 验证参数类型 /** * 参数验证(仅类型) * @param array $para 数据 * @param array $standard 参数要求 * @return boolen * 使用: * Validate::verifyParams($data,[ 'REQUIRED' => [ 'username' => 'string', ], 'OPTIONAL' => [ 'ip' => 'string', ], ]); */ function verifyParams($para, $standard) { if ($para === false || empty($para)) { return false; } foreach ($standard['REQUIRED'] as $k => $v) { if (!array_key_exists($k, $para)) { return false; } if(empty($para[$k])){ return false; } if ('string' == $v) { if (false === is_string($para[$k])) { return false; } } else if ('int' == $v) { if ((string)((int)($para[$k])) != $para[$k]) { return false; } } else { return false; } } foreach ($standard['OPTIONAL'] as $k => $v) { if (!array_key_exists($k, $para)) { continue; } if ('string' == $v) { if (!empty($para[$k]) && false === is_string($para[$k])) { return false; } } else if ('int' == $v) { if (!empty($para[$k]) && (string)((int)($para[$k])) != $para[$k]) { return false; } } else { return false; } } return true; } 1.2.1.2.4. * 数据导出类 * 导出CSV格式数据 /** * 导出CSV文件 * @param string 文件名称 * @param Array 数据头 * @param Array 数据体 */ function exportCsv($fileName, $titleArr=[], $dataArr=[]) { ini_set('memory_limit','128M'); ini_set('max_execution_time',0); ob_end_clean(); ob_start(); header(\"Content-Type: text/csv\"); header(\"Content-Disposition:filename=\".$fileName); $fp=fopen('php://output','w'); fwrite($fp, chr(0xEF).chr(0xBB).chr(0xBF));//防止乱码(比如微信昵称) fputcsv($fp,$titleArr); $index = 0; foreach ($dataArr as $item) { if($index==1000){ $index=0; ob_flush(); flush(); } $index++; fputcsv($fp,$item); } ob_flush(); flush(); ob_end_clean(); } 导出CSV格式数据 /** * 导出CSV格式数据 * @param $fileName * @param array $titleArr * @param array $dataArr */ function exportCsv2($fileName, $titleArr=[], $dataArr=[]) { ini_set('memory_limit', '128M'); ini_set('max_execution_time',0); $output = fopen($fileName, 'w'); //add BOM to fix UTF-8 in Excel fputs($output, $bom =( chr(0xEF) . chr(0xBB) . chr(0xBF) ) ); //告诉浏览器这个是一个csv文件 header(\"Content-Type: application/csv;charset=utf-8\"); header(\"Content-Disposition: attachment; filename={$fileName}\"); header('Cache-Control:must-revalidate,post-check=0,pre-check=0'); header('Expires:0'); header('Pragma:public'); fputcsv($output, $titleArr); //输出表头 foreach ($dataArr as $v) { //输出每一行数据到文件中 fputcsv($output, array_values($v)); } fclose($output); } 1.2.1.2.5. * 计算类 * 浮点数求和 /** * 浮点数求和（如果是减 就把参数前加 - 号） * @param array ...$params(5.6以上写法) * @return mixed 保留两位小数 */ function add(...$params) { return array_reduce($params,function($base,$n){ $base = bcadd($base,+$n,2); return $base; }); } 》》》 $ret1 = add(10.01, 20.22, 0.1); print_r($ret1); >>> 30.33 1.2.1.2.6. * 时间日期类 * 获取指定月份始末时间戳 /** * 获取指定月份始末时间戳 * @param integer $year 年份 * @param integer $month 月份 */ function getMonthTimestamps($year,$month) { if( !checkdate($month, 1, $year) ){ return false; } $start = mktime(0, 0, 0, $month, 1, $year); $end = mktime(23, 59, 59, $month, date('t',$start), $year); return $start && $end ? [$start,$end] : false; } * 文件类 * lanlangdeai            updated 2021-06-28 15:56:59 "},"php/files.html":{"url":"php/files.html","title":"文件类","keywords":"","body":"1.2.1.1. 文件类1.2.1.1. 文件类 lanlangdeai            updated 2021-06-28 15:58:50 "},"php/classes.html":{"url":"php/classes.html","title":"常用类","keywords":"","body":"1.2.2. 常用类1.2.2.1. 1. =============== 自封装 ===============1.2.2.1.1. 文件处理（上传/下载）1.2.2.1.2. 字符串加解密1.2.2.1.3. 字符串加解密21.2.2.2. 2.===================== 基于第三方库 ====================1.2.2. 常用类 1.2.2.1. 1. =============== 自封装 =============== 获取客户端代理信息 0) { preg_match(\"/Firefox\\/([^;)]+)+/i\", $sys, $b); $exp[0] = \"Firefox\"; $exp[1] = $b[1]; //获取火狐浏览器的版本号 } elseif (stripos($sys, \"Maxthon\") > 0) { preg_match(\"/Maxthon\\/([\\d\\.]+)/\", $sys, $aoyou); $exp[0] = \"傲游\"; $exp[1] = $aoyou[1]; } elseif (stripos($sys, \"MSIE\") > 0) { preg_match(\"/MSIE\\s+([^;)]+)+/i\", $sys, $ie); $exp[0] = \"IE\"; $exp[1] = $ie[1]; //获取IE的版本号 } elseif (stripos($sys, \"OPR\") > 0) { preg_match(\"/OPR\\/([\\d\\.]+)/\", $sys, $opera); $exp[0] = \"Opera\"; $exp[1] = $opera[1]; } elseif (stripos($sys, \"Edge\") > 0) { //win10 Edge浏览器 添加了chrome内核标记 在判断Chrome之前匹配 preg_match(\"/Edge\\/([\\d\\.]+)/\", $sys, $Edge); $exp[0] = \"Edge\"; $exp[1] = $Edge[1]; } elseif (stripos($sys, \"Chrome\") > 0) { preg_match(\"/Chrome\\/([\\d\\.]+)/\", $sys, $google); $exp[0] = \"Chrome\"; $exp[1] = $google[1]; //获取google chrome的版本号 } elseif (stripos($sys, 'rv:') > 0 && stripos($sys, 'Gecko') > 0) { preg_match(\"/rv:([\\d\\.]+)/\", $sys, $IE); $exp[0] = \"IE\"; $exp[1] = $IE[1]; } elseif (stripos($sys, 'Safari') > 0) { preg_match(\"/safari\\/([^\\s]+)/i\", $sys, $safari); $exp[0] = \"Safari\"; $exp[1] = $safari[1]; } else { $exp[0] = \"未知浏览器\"; $exp[1] = \"\"; } return $exp[0] . '(' . $exp[1] . ')'; } /** * 获取客户端操作系统信息包括win10 */ public static function getOs() { $agent = $_SERVER['HTTP_USER_AGENT']; if (preg_match('/win/i', $agent) && strpos($agent, '95')) { $os = 'Windows 95'; } else if (preg_match('/win 9x/i', $agent) && strpos($agent, '4.90')) { $os = 'Windows ME'; } else if (preg_match('/win/i', $agent) && preg_match('/98/i', $agent)) { $os = 'Windows 98'; } else if (preg_match('/win/i', $agent) && preg_match('/nt 6.0/i', $agent)) { $os = 'Windows Vista'; } else if (preg_match('/win/i', $agent) && preg_match('/nt 6.1/i', $agent)) { $os = 'Windows 7'; } else if (preg_match('/win/i', $agent) && preg_match('/nt 6.2/i', $agent)) { $os = 'Windows 8'; } else if (preg_match('/win/i', $agent) && preg_match('/nt 10.0/i', $agent)) { $os = 'Windows 10';#添加win10判断 } else if (preg_match('/win/i', $agent) && preg_match('/nt 5.1/i', $agent)) { $os = 'Windows XP'; } else if (preg_match('/win/i', $agent) && preg_match('/nt 5/i', $agent)) { $os = 'Windows 2000'; } else if (preg_match('/win/i', $agent) && preg_match('/nt/i', $agent)) { $os = 'Windows NT'; } else if (preg_match('/win/i', $agent) && preg_match('/32/i', $agent)) { $os = 'Windows 32'; } else if (preg_match('/linux/i', $agent)) { $os = 'Linux'; } else if (preg_match('/unix/i', $agent)) { $os = 'Unix'; } else if (preg_match('/sun/i', $agent) && preg_match('/os/i', $agent)) { $os = 'SunOS'; } else if (preg_match('/ibm/i', $agent) && preg_match('/os/i', $agent)) { $os = 'IBM OS/2'; } else if (preg_match('/Mac/i', $agent)) { $os = 'Mac'; } else if (preg_match('/PowerPC/i', $agent)) { $os = 'PowerPC'; } else if (preg_match('/AIX/i', $agent)) { $os = 'AIX'; } else if (preg_match('/HPUX/i', $agent)) { $os = 'HPUX'; } else if (preg_match('/NetBSD/i', $agent)) { $os = 'NetBSD'; } else if (preg_match('/BSD/i', $agent)) { $os = 'BSD'; } else if (preg_match('/OSF1/i', $agent)) { $os = 'OSF1'; } else if (preg_match('/IRIX/i', $agent)) { $os = 'IRIX'; } else if (preg_match('/FreeBSD/i', $agent)) { $os = 'FreeBSD'; } else if (preg_match('/teleport/i', $agent)) { $os = 'teleport'; } else if (preg_match('/flashget/i', $agent)) { $os = 'flashget'; } else if (preg_match('/webzip/i', $agent)) { $os = 'webzip'; } else if (preg_match('/offline/i', $agent)) { $os = 'offline'; } elseif (preg_match('/ucweb|MQQBrowser|J2ME|IUC|3GW100|LG-MMS|i60|Motorola|MAUI|m9|ME860|maui|C8500|gt|k-touch|X8|htc|GT-S5660|UNTRUSTED|SCH|tianyu|lenovo|SAMSUNG/i', $agent)) { $os = 'mobile'; } else { $os = '未知操作系统'; } return $os; } } 1.2.2.1.1. 文件处理（上传/下载） getMessage(); return \"文件不存在\"; } } if (!$ext) { $ext = pathinfo($file_path, PATHINFO_EXTENSION); } if ($ext && !strpos($file_name, \".\")) { $file_name = $file_name . \".\" . $ext; } $content_type = self::getMime($ext); header(\"Cache-Control:\"); header(\"Cache-Control: public\"); // 文件类型 header(\"Content-type: {$content_type}\"); // 处理中文文件名 $ua = $_SERVER[\"HTTP_USER_AGENT\"]; if (preg_match(\"/MSIE/\", $ua)) { $encoded_filename = rawurlencode($file_name); header('Content-Disposition: attachment; filename=\"' . $encoded_filename . '\"'); } else if (preg_match(\"/Firefox/\", $ua)) { header(\"Content-Disposition: attachment; filename*=\\\"utf8''\" . $file_name . '\"'); } else { header('Content-Disposition: attachment; filename=\"' . $file_name . '\"'); } // 文件大小 if ($file_size) { header(\"Accept-Length: \". $file_size); header(\"Content-Length: \" . $file_size); } readfile($file_path); } /** * 功能：php多种方式完美实现下载远程图片保存到本地 * 参数：文件url,保存文件名称，使用的下载方式 * 当保存文件名称为空时则使用远程文件原来的名称 * @param string $url 请求图片的链接 * @param string $filename 保存的文件名 * @param int $type 保存图片的类型 0为curl,适用于静态图片,其他为缓冲缓存,适用于动态图片 * @return string $filename 返回保存的文件名 */ public static function downloadImage($url, $filename, $type = 0) { if ($url == '') { return false; } $ext = pathinfo($filename, PATHINFO_EXTENSION); if (!in_array($ext, ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'ico', 'tif', 'tiff'])) { $ext = pathinfo($url, PATHINFO_EXTENSION); if (!in_array($ext, ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'ico', 'tif', 'tiff'])) { $ext = 'jpg'; } $filename = $filename . \".\" . $ext; } //下载文件流 if ($type) { $ch = curl_init(); $timeout = 5; curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); $img = curl_exec($ch); curl_close($ch); } else { ob_start(); readfile($url); $img = ob_get_contents(); ob_end_clean(); } //保存文件 // try { $fp2 = fopen($filename, 'w'); fwrite($fp2, $img); fclose($fp2); return $filename; /*} catch (\\think\\Exception $e) { //TODO 异常处理 return false; }*/ } /** * 获取文件Mime * @param string $ext * @return string */ public static function getMime($ext) { $mimes = [ 'xml' => 'text/xml', 'json' => 'application/json', 'js' => 'text/javascript', 'php' => 'application/octet-stream', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'xhtml' => 'text/html', 'rss' => 'application/rss+xml', 'yaml' => 'application/x-yaml', 'atom' => 'application/atom+xml', 'pdf' => 'application/pdf', 'text' => 'text/plain', 'png' => 'image/png', 'jpg' => 'image/jpeg', 'gif' => 'image/gif', 'csv' => 'text/csv', 'tif' => 'image/tiff', 'ai' => 'application/postscript', 'asp' => 'text/asp', 'au' => 'audio/basic', 'avi' => 'video/avi', 'rmvb' => 'application/vnd.rn-realmedia-vbr', '3gp' => 'application/octet-stream', 'flv' => 'application/octet-stream', 'mp3' => 'audio/mpeg', 'wav' => 'audio/wav', 'sql' => 'application/octet-stream', 'rar' => 'application/octet-stream', 'zip' => 'application/zip', '7z' => 'application/octet-stream', 'bmp' => 'application/x-bmp', 'cdr' => 'application/x-cdr', 'class' => 'java/*', 'exe' => 'application/x-msdownload', 'fax' => 'image/fax', 'icb' => 'application/x-icb', 'ico' => 'image/x-icon', 'java' => 'java/*', 'jfif' => 'image/jpeg', 'jpeg' => 'image/jpeg', 'jsp' => 'text/html', 'mp4' => 'video/mpeg4', 'mpa' => 'video/x-mpg', 'mpeg' => 'video/mpg', 'mpg' => 'video/mpg', 'mpga' => 'audio/rn-mpeg', 'ras' => 'application/x-ras', 'tiff' => 'image/tiff', 'txt' => 'text/plain', 'wax' => 'audio/x-ms-wax', 'wm' => 'video/x-ms-wm', 'apk' => 'application/vnd.android.package-archive', 'doc' => 'application/msword', 'dot' => 'application/msword', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'docm' => 'application/vnd.ms-word.document.macroEnabled.12', 'dotm' => 'application/vnd.ms-word.template.macroEnabled.12', 'xls' => 'application/vnd.ms-excel', 'xlt' => 'application/vnd.ms-excel', 'xla' => 'application/vnd.ms-excel', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'xlsm' => 'application/vnd.ms-excel.sheet.macroEnabled.12', 'xltm' => 'application/vnd.ms-excel.template.macroEnabled.12', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'ppt' => 'application/vnd.ms-powerpoint', 'pot' => 'application/vnd.ms-powerpoint', 'pps' => 'application/vnd.ms-powerpoint', 'ppa' => 'application/vnd.ms-powerpoint', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'ppam' => 'application/vnd.ms-powerpoint.addin.macroEnabled.12', 'pptm' => 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'potm' => 'application/vnd.ms-powerpoint.template.macroEnabled.12', 'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12', ]; return isset($mimes[$ext]) ? $mimes[$ext] : 'application/octet-stream'; } } 1.2.2.1.2. 字符串加解密 class Encrypt { /** * 加密 * @param string $str 需加密字符串 * @param integer $factor 分类 * @return string 加密之后的字符串 */ static function doEncode(string $str , int $factor = 0){ $len = strlen($str); if(!$len){ return; } if($factor === 0){ $factor = mt_rand(1, min(255 , ceil($len / 3))); } $c = $factor % 8; $slice = str_split($str ,$factor); for($i=0;$i 1.2.2.1.3. 字符串加解密2 class EncryptAndDecrypt { /** * 加解密算法 * @param string $string 加密数据 * @param string $rand 加密随机字符串 * @param string $action 加解密方式标识 * @return string 加解密之后数据 */ public static function mymd5($string, $rand='randstring', $action=\"EN\") { $secret_string = $rand.'5*a,.^&;?.%#@!'; if($string==\"\") return \"\"; if($action==\"EN\"){ $md5code=substr(md5($string),8,10); }else{ $md5code=substr($string,-10); $string=substr($string,0,strlen($string)-10); } //$key = md5($md5code.$_SERVER[\"HTTP_USER_AGENT\"].$secret_string); $key = md5($md5code.$secret_string); $string = ($action==\"EN\" ? $string : base64_decode($string)); $len = strlen($key); $code = \"\"; for($i=0; $i 1.2.2.2. 2.===================== 基于第三方库 ==================== PHPExcel（https://github.com/PHPOffice/PHPExcel） setActiveSheetIndex(0); $char_index = range(\"A\", \"Z\"); // Excel 表格头 foreach ($head as $key => $val) { $sheetPHPExcel->setCellValue(\"{$char_index[$key]}1\", $val); } // Excel body 部分 foreach ($body as $key => $val) { $row = $key + 2; $col = 0; foreach ($val as $k => $v) { $sheetPHPExcel->setCellValue(\"{$char_index[$col]}{$row}\", $v); $col++; } } // 版本差异信息 $version_opt = [ '2007' => [ 'mime' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'ext' => '.xlsx', 'write_type' => 'Excel2007', ], '2003' => ['mime' => 'application/vnd.ms-excel', 'ext' => '.xls', 'write_type' => 'Excel5', ], 'pdf' => ['mime' => 'application/pdf', 'ext' => '.pdf', 'write_type' => 'PDF', ], 'ods' => ['mime' => 'application/vnd.oasis.opendocument.spreadsheet', 'ext' => '.ods', 'write_type' => 'OpenDocument', ], ]; header('Content-Type: ' . $version_opt[$version]['mime']); header('Content-Disposition: attachment;filename=\"' . $name . $version_opt[$version]['ext'] . '\"'); header('Cache-Control: max-age=0'); // If you're serving to IE 9, then the following may be needed header('Cache-Control: max-age=1'); // If you're serving to IE over SSL, then the following may be needed header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified header('Cache-Control: cache, must-revalidate'); // HTTP/1.1 header('Pragma: public'); // HTTP/1.0 $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, $version_opt[$version]['write_type']); $objWriter->save('php://output'); } catch (Exception $e) { return $e->getMessage(); } } /** * 解析 Excel 数据并写入到数据库 * @param string $file Excel 路径名文件名 * @param array $header 表头对应字段信息 ['A'=>'field1', 'B'=>'field2', ...] * @param int $perLimit 每次一次性写入数据库中的行数 * @param mixed $insertFunc 写入数据库的回调函数，可以用匿名函数 * @param string $type Excel2007|Excel5 * @return int */ public static function parse($file, $header, $perLimit, $insertFunc, $type = '') { $type = self::getType($file, $type); $objReader = PHPExcel_IOFactory::createReader($type); $objPHPExcel = $objReader->load($file); // 数据数组 $data = []; // 已导入数据计数 $count = 0; // 跳过第一行 foreach ($objPHPExcel->getSheet()->getRowIterator(2) as $row) { // 逐个单元格读取，减少内存消耗 $cellIterator = $row->getCellIterator(); // 不跳过空值 $cellIterator->setIterateOnlyExistingCells(); // 只读取显示的行、列，跳过隐藏行、列 if ($objPHPExcel->getActiveSheet()->getRowDimension($row->getRowIndex())->getVisible()) { $rowData = []; foreach ($cellIterator as $cell) { if ($objPHPExcel->getActiveSheet()->getColumnDimension($cell->getColumn())->getVisible()) { if (isset($header[$cell->getColumn()])) { $rowData[$header[$cell->getColumn()]] = $cell->getValue(); } } } $data[] = $rowData; $count++; // 数据分批写入数据库，防止一条SQL太长数据库不支持 if ($count && $count % $perLimit == 0) { $insertFunc($data); // 清空已有数据 $data = []; } } } // 写入剩余数据 if ($data) { $insertFunc($data); } return $count; } /** * 解析 Excel 获取第一行头信息 * @param string $file Excel 路径名文件名 * @param string $type Excel2007|Excel5 * @return array */ public static function parseHeader($file, $type = '') { $type = self::getType($file, $type); $objReader = PHPExcel_IOFactory::createReader($type); $objPHPExcel = $objReader->load($file); $header = []; foreach ($objPHPExcel->getSheet()->getRowIterator() as $row) { // 逐个单元格读取，减少内存消耗 $cellIterator = $row->getCellIterator(); // 不跳过空值 $cellIterator->setIterateOnlyExistingCells(); if ($objPHPExcel->getActiveSheet()->getRowDimension($row->getRowIndex())->getVisible()) { foreach ($cellIterator as $cell) { if ($objPHPExcel->getActiveSheet()->getColumnDimension($cell->getColumn())->getVisible()) { $header[$cell->getColumn()] = $cell->getValue(); } } break; } } return $header; } /** * 自动获取 Excel 类型 * @param string $file Excel 路径名文件名 * @param string $type Excel2007|Excel5 * @return string * @throws Exception */ private static function getType($file, $type = '') { if (!$type) { $ext = pathinfo($file, PATHINFO_EXTENSION); switch ($ext) { case 'xls' : $type = 'Excel5'; break; case 'xlsx' : $type = 'Excel2007'; break; default: throw new Exception('请指定Excel的类型'); } } return $type; } /** * 将 Excel 时间转为标准的时间格式 * @param $date * @param bool $time * @return array|int|string */ public static function excelTime($date, $time = false) { if (function_exists('GregorianToJD')) { if (is_numeric($date)) { $jd = GregorianToJD(1, 1, 1970); $gregorian = JDToGregorian($jd + intval($date) - 25569); $date = explode('/', $gregorian); $date_str = str_pad($date [2], 4, '0', STR_PAD_LEFT) . \"-\" . str_pad($date [0], 2, '0', STR_PAD_LEFT) . \"-\" . str_pad($date [1], 2, '0', STR_PAD_LEFT) . ($time ? \" 00:00:00\" : ''); return $date_str; } } else { $date = $date > 25568 ? $date + 1 : 25569; $ofs = (70 * 365 + 17 + 3) * 86400; $date = date(\"Y-m-d\", ($date * 86400) - $ofs) . ($time ? \" 00:00:00\" : ''); } return $date; } } 读取Excel文件 $fileName = \"url.xls\"; if (!file_exists($fileName)) { exit(\"文件\".$fileName.\"不存在\"); } require_once './PHPExcel/IOFactory.php'; $objPHPExcel = PHPExcel_IOFactory::load($fileName); //获取sheet表格数目 $sheetCount = $objPHPExcel->getSheetCount(); //默认选中sheet0表 $sheetSelected = 0; $objPHPExcel->setActiveSheetIndex($sheetSelected); //获取表格行数 $rowCount = $objPHPExcel->getActiveSheet()->getHighestRow(); //获取表格列数 $columnCount = $objPHPExcel->getActiveSheet()->getHighestColumn(); echo \"Sheet Count : \".$sheetCount.\"　　行数： \".$rowCount.\"　　列数：\".$columnCount.\"\"; $dataArr = array(); /* 循环读取每个单元格的数据 */ //行数循环 for ($row = 1; $row getActiveSheet()->getCell($column.$row)->getValue(); echo $column.$row.\":\".$objPHPExcel->getActiveSheet()->getCell($column.$row)->getValue().\"\"; } echo \"消耗的内存为：\".(memory_get_peak_usage(true) / 1024 / 1024).\"M\"; $endTime = time(); echo \"解析完后，当前的时间为：\".date(\"Y-m-d H:i:s\").\"　　　 总共消耗的时间为：\".(($endTime - $startTime)).\"秒\"; var_dump($dataArr); $dataArr = NULL; } lanlangdeai            updated 2021-07-08 18:53:54 "},"php/composer.html":{"url":"php/composer.html","title":"第三方包","keywords":"","body":"1.2.3. 第三方扩展库1.2.3.1. 加解密组件1.2.3.1.1. hashids(https://github.com/vinkla/hashids)1.2.3.2. 数据操作工具1.2.3.2.1. php-dot-notation(https://github.com/adbario/php-dot-notation)1.2.3.2.2. weblibs-configmanager(https://github.com/clagiordano/weblibs-configmanager/)1.2.3.2.3. danielstjules/stringy（https://github.com/danielstjules/Stringy）1.2.3.2.4. jmespath/jmespath.py(https://github.com/jmespath/jmespath.php) 有PHP，Python，js，lua等语言支持1.2.3.2.5. 日志处理1.2.3.2.6. 第三方开发工具包1.2.3.2.7. overtrue/wechat(https://easywechat.com/)（https://github.com/w7corp/easywechat）1.2.3.2.8. overtrue/socialite(https://github.com/overtrue/socialite)1.2.3.2.9. overtrue/pinyin(https://github.com/overtrue/pinyin)1.2.3.2.10. overtrue/easy-sms(https://github.com/overtrue/easy-sms)1.2.3.2.11. phpqrcode/phpqrcode(http://phpqrcode.sourceforge.net) (PHP生成二维码图片 phpqrcode库php-qrcode包 中文手册文档)1.2.3.2.12. 其他1.2.3.2.13. 七牛-图片存储服务1.2.3.2.14. tp-mailer(https://github.com/yuan1994/tp-mailer)1.2.3. 第三方扩展库 使用composer进行安装，卸载，升级 1.2.3.1. 加解密组件 1.2.3.1.1. hashids(https://github.com/vinkla/hashids) Hashids是一个能利用整数生成出短小、唯一、非连续标识符的类库，它支持包含php在内的好多好多（真的好多）种语言。 Hashids支持通过生成出来的标识符进行解码为原数字，还支持加盐加密，不会因为大家都用这个类库就被猜到真实ID。 官网地址：https://hashids.org 该库支持多种库JavaScript, Ruby, Python, Java, Scala, PHP, Perl, Perl 6, Swift, Clojure, Objective-C, C, C++11, D, F#, Go, Erlang, Lua, Haskell, OCaml, Elixir, Rust, Smalltalk, ColdFusion, Kotlin, Nim, VBA, Haxe, Crystal, Elm, ActionScript, Bash, R, TSQL, PostgreSQL, PLpgSQL, Dart, Io, Julia and for .NET 安装： composer require hashids/hashids 使用： use Hashids\\Hashids; $hashids = new Hashids(); $hashids->encode(1); =================================== use Hashids\\Hashids; $hashids = new Hashids(); $id = $hashids->encode(1, 2, 3); // o2fXhV $numbers = $hashids->decode($id); // [1, 2, 3] 1.2.3.2. 数据操作工具 1.2.3.2.1. php-dot-notation(https://github.com/adbario/php-dot-notation) 可以使用点符号操作数组的类库 安装： composer require adbario/php-dot-notation 示例： // 之前数据 $array['info']['home']['address'] = 'Kings Square'; echo $array['info']['home']['address']; // Kings Square //使用该类库 $dot->set('info.home.address', 'Kings Square'); echo $dot->get('info.home.address'); or $dot['info.home.address'] = 'Kings Square'; echo $dot['info.home.address']; 1.2.3.2.2. weblibs-configmanager(https://github.com/clagiordano/weblibs-configmanager/) weblib-configmanager是一个简单而轻量的工具库，用于管理PHP分层配置文件，可以实现对于数组文件的读取与修改操作 支持的格式： 安装： composer require clagiordano/weblibs-configmanager 基本使用： 基础数据 'app_name', 'db' => array ( 'host' => 'localhost', 'user' => 'sample_user', 'pass' => 'sample_pass', 'port' => 3306, ), 'other' => array ( 'multi' => array ( 'deep' => array ( 'nested' => 'config_value', ), ), ), ); 操作： 1） use clagiordano\\weblibs\\configmanager\\ConfigManager; /** * Instance object to read argument file */ $config = new ConfigManager(\"configfile.php\"); 2） /** * Check if a value exists into config file */ $value = $config->existValue('app'); 3） /** * Read a simple element from config file */ $value = $config->getValue('app'); 4） /** * Access to a nested element from config */ $nestedValue = $config->getValue('other.multi.deep.nested'); 5） /** * Change config value at runtime */ $this->config->setValue('other.multi.deep.nested', \"SUPERNESTED\"); 6） /** * Save config file with original name (OVERWRITE) */ $this->config->saveConfigFile('/new/file/name/or/path/test.php'); 1.2.3.2.3. danielstjules/stringy（https://github.com/danielstjules/Stringy） 一个支持多字节的PHP字符串操作库。兼容PHP 5.4+， PHP 7+和HHVM 安装 composer： require 'vendor/autoload.php'; 包导入： require_once 'path/to/Stringy/src/Stringy.php'; use Stringy\\Stringy as S; 示例 // Standard library strtoupper('fòôbàř'); // 'FòôBàř' strlen('fòôbàř'); // 10 // mbstring mb_strtoupper('fòôbàř'); // 'FÒÔBÀŘ' mb_strlen('fòôbàř'); // '6' // Stringy s('fòôbàř')->toUpperCase(); // 'FÒÔBÀŘ' s('fòôbàř')->length(); // '6' 方便处理包含特殊多字符的字符串，支持多种操作 1.2.3.2.4. jmespath/jmespath.py(https://github.com/jmespath/jmespath.php) 有PHP，Python，js，lua等语言支持 JMESPath是JSON的查询语言 安装 composer require \"mtdowling/jmespath.php\" 使用 require 'vendor/autoload.php'; $expression = 'foo.*.baz'; $data = [ 'foo' => [ 'bar' => ['baz' => 1], 'bam' => ['baz' => 2], 'boo' => ['baz' => 3] ] ]; ($expression, $data); // Returns: [1, 2, 3] PHPOffice/PHPExcel(https://github.com/PHPOffice/PHPExcel) 安装 composer require phpoffice/phpexcel 使用 /** Include PHPExcel */ require_once dirname(__FILE__) . '/../Classes/PHPExcel.php'; // Create new PHPExcel object echo date('H:i:s') , \" Create new PHPExcel object\" , EOL; $objPHPExcel = new PHPExcel(); // Set document properties echo date('H:i:s') , \" Set document properties\" , EOL; $objPHPExcel->getProperties()->setCreator(\"Maarten Balliauw\") ->setLastModifiedBy(\"Maarten Balliauw\") ->setTitle(\"PHPExcel Test Document\") ->setSubject(\"PHPExcel Test Document\") ->setDescription(\"Test document for PHPExcel, generated using PHP classes.\") ->setKeywords(\"office PHPExcel php\") ->setCategory(\"Test result file\"); // Add some data echo date('H:i:s') , \" Add some data\" , EOL; $objPHPExcel->setActiveSheetIndex(0) ->setCellValue('A1', 'Hello') ->setCellValue('B2', 'world!') ->setCellValue('C1', 'Hello') ->setCellValue('D2', 'world!'); // Miscellaneous glyphs, UTF-8 $objPHPExcel->setActiveSheetIndex(0) ->setCellValue('A4', 'Miscellaneous glyphs') ->setCellValue('A5', 'éàèùâêîôûëïüÿäöüç'); $objPHPExcel->getActiveSheet()->setCellValue('A8',\"Hello\\nWorld\"); $objPHPExcel->getActiveSheet()->getRowDimension(8)->setRowHeight(-1); $objPHPExcel->getActiveSheet()->getStyle('A8')->getAlignment()->setWrapText(true); // Rename worksheet echo date('H:i:s') , \" Rename worksheet\" , EOL; $objPHPExcel->getActiveSheet()->setTitle('Simple'); // Set active sheet index to the first sheet, so Excel opens this as the first sheet $objPHPExcel->setActiveSheetIndex(0); 1.2.3.2.5. 日志处理 monolog/monolog(https://github.com/Seldaek/monolog) 将日志发送到文件、套接字、收件箱、数据库和各种web服务， 最新版本2.0只支持PHP7.2 如果是以下版本，可以使用^1.25版本 它支持PHP5 安装 composer require monolog/monolog 使用 pushHandler(new StreamHandler('path/to/your.log', Logger::WARNING)); // add records to the log $log->warning('Foo'); $log->error('Bar'); 1.2.3.2.6. 第三方开发工具包 1.2.3.2.7. overtrue/wechat(https://easywechat.com/)（https://github.com/w7corp/easywechat） 非官网的微信SDK，方便快捷的接入微信相关功能,还支持laravel框架的集成（https://github.com/overtrue/laravel-wechat） 安装 composer require \"overtrue/wechat:~3.1\" -vvv 使用 use EasyWeChat\\Factory; $options = [ 'app_id' => 'wx3cf0f39249eb0exxx', 'secret' => 'f1c242f4f28f735d4687abb469072xxx', 'token' => 'easywechat', 'log' => [ 'level' => 'debug', 'file' => '/tmp/easywechat.log', ], // ... ]; $app = Factory::officialAccount($options); $server = $app->server; $user = $app->user; $server->push(function($message) use ($user) { $fromUser = $user->get($message['FromUserName']); return \"{$fromUser->nickname} 您好！欢迎关注 overtrue!\"; }); $server->serve()->send(); 1.2.3.2.8. overtrue/socialite(https://github.com/overtrue/socialite) Socialite 是一个 OAuth2 认证工具。 它的灵感来源于 laravel/socialite， 你可以很轻易的在任何 PHP 项目中使用它。 该工具现已支持平台有：Facebook，Github，Google，Linkedin，Outlook，QQ，TAPD，支付宝，淘宝，百度，钉钉，微博，微信，抖音，飞书，豆瓣，企业微信，腾讯云。 安装 $ composer require \"overtrue/socialite\" -vvv Alipay - 用户信息授权 DingTalk - 扫码登录第三方网站 Google - OpenID Connect Github - Authorizing OAuth Apps Facebook - Graph API Linkedin - Authenticating with OAuth 2.0 微博 - OAuth 2.0 授权机制说明 QQ - OAuth 2.0 登录QQ 腾讯云 - OAuth2.0 微信公众平台 - OAuth文档 微信开放平台 - 网站应用微信登录开发指南 微信开放平台 - 代公众号发起网页授权 豆瓣 - OAuth 2.0 授权机制说明 抖音 - 网站应用开发指南 飞书 - 授权说明 Tapd - 用户授权说明 使用参考：socialite/README_CN.md at master · overtrue/socialite (github.com) 1.2.3.2.9. overtrue/pinyin(https://github.com/overtrue/pinyin) &#x1F1E8;&#x1F1F3; 基于 CC-CEDICT 词典的中文转拼音工具，更准确的支持多音字的汉字转拼音解决方案。 安装 composer require \"overtrue/pinyin:~4.0\" 使用 use Overtrue\\Pinyin\\Pinyin; // 小内存型 $pinyin = new Pinyin(); // 默认 // 内存型 // $pinyin = new Pinyin('\\\\Overtrue\\\\Pinyin\\\\MemoryFileDictLoader'); // I/O型 // $pinyin = new Pinyin('\\\\Overtrue\\\\Pinyin\\\\GeneratorFileDictLoader'); $pinyin->convert('带着希望去旅行，比到达终点更美好'); // [\"dai\", \"zhe\", \"xi\", \"wang\", \"qu\", \"lyu\", \"xing\", \"bi\", \"dao\", \"da\", \"zhong\", \"dian\", \"geng\", \"mei\", \"hao\"] $pinyin->convert('带着希望去旅行，比到达终点更美好', PINYIN_TONE); // [\"dài\",\"zhe\",\"xī\",\"wàng\",\"qù\",\"lǚ\",\"xíng\",\"bǐ\",\"dào\",\"dá\",\"zhōng\",\"diǎn\",\"gèng\",\"měi\",\"hǎo\"] $pinyin->convert('带着希望去旅行，比到达终点更美好', PINYIN_ASCII_TONE); //[\"dai4\",\"zhe\",\"xi1\",\"wang4\",\"qu4\",\"lyu3\",\"xing2\",\"bi3\",\"dao4\",\"da2\",\"zhong1\",\"dian3\",\"geng4\",\"mei3\",\"hao3\"] 1.2.3.2.10. overtrue/easy-sms(https://github.com/overtrue/easy-sms) 一款满足你的多种发送需求的短信发送组件 安装 $ composer require \"overtrue/easy-sms\" 使用 use Overtrue\\EasySms\\EasySms; $config = [ // HTTP 请求的超时时间（秒） 'timeout' => 5.0, // 默认发送配置 'default' => [ // 网关调用策略，默认：顺序调用 'strategy' => \\Overtrue\\EasySms\\Strategies\\OrderStrategy::class, // 默认可用的发送网关 'gateways' => [ 'yunpian', 'aliyun', ], ], // 可用的网关配置 'gateways' => [ 'errorlog' => [ 'file' => '/tmp/easy-sms.log', ], 'yunpian' => [ 'api_key' => '824f0ff2f71cab52936axxxxxxxxxx', ], 'aliyun' => [ 'access_key_id' => '', 'access_key_secret' => '', 'sign_name' => '', ], //... ], ]; $easySms = new EasySms($config); $easySms->send(13188888888, [ 'content' => '您的验证码为: 6379', 'template' => 'SMS_001', 'data' => [ 'code' => 6379 ], ]); 1.2.3.2.11. phpqrcode/phpqrcode(http://phpqrcode.sourceforge.net) (PHP生成二维码图片 phpqrcode库php-qrcode包 中文手册文档) 生成二维码工具 其他：php-qrcode(chillerlan/php-qrcode: A QR Code generator for PHP7.4+ (github.com)) 安装 原生phpqrcode 不支持composer //thinkphp6 放入 extend 目录 require_once \\think\\facade\\App::getRootPath().'extend/phpqrcode/phpqrcode.php'; //其它框架自行引入 require_once ./phpqrcode/phpqrcode.php 使用 function create_qrcode($str,$path){ vendor(\"phpqrcode.phpqrcode\"); // 纠错级别：L、M、Q、H $level = 'Q'; // 点的大小：1到10,用于手机端4就可以了 $size = 8; $QRcode = new \\QRcode(); try{ ob_clean(); }catch (\\Exception $e){ trace($e); } $QRcode::png($str, $path, $level, $size); } 1.2.3.2.12. 其他 1.2.3.2.13. 七牛-图片存储服务 安装 composer require qiniu/php-sdk 邮件相关 1.2.3.2.14. tp-mailer(https://github.com/yuan1994/tp-mailer) 一款支持所有PHP框架的优美的邮件发送类，ThinkPHP系列框架开箱即用，其他框架初始化配置即可使用 基于 SwiftMailer 二次开发, 为 ThinkPHP系列框架量身定制, 使 ThinkPHP 支持邮件模板、纯文本、附件邮件发送以及更多邮件功能, 邮件发送简单到只需一行代码 同时了方便其他框架或者非框架使用, Tp Mailer也非常容易拓展融合到其他框架中, 欢迎大家 Fork 和 Star, 提交代码让Tp Mailer支持更多框架 安装： composer require yuan1994/tp-mailer 或者 //下载源码，引入使用 require_once '/path/to/tp-mailer/src/autoload.php; lanlangdeai            updated 2021-07-06 14:40:10 "},"python/python.html":{"url":"python/python.html","title":"Python","keywords":"","body":"1.3. Python语言1.3.1. 相关文档1.3. Python语言 1.3.1. 相关文档 官方文档：https://docs.python.org/3/ 官网中文版3.7 本地手册查看 lanlangdeai            updated 2021-05-26 15:52:15 "},"python/basics.html":{"url":"python/basics.html","title":"基础语法","keywords":"","body":"1.3.1. 基础语法1.3.1. 基础语法 【Pip】 镜像加速： 1.临时使用 pip install markdown -i https://pypi.tuna.tsinghua.edu.cn/simple 2.永久设置 # 清华源 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 阿里源 pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ # 腾讯源 pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple # 豆瓣源 pip config set global.index-url http://pypi.douban.com/simple/ lanlangdeai            updated 2021-09-15 18:06:36 "},"python/functions.html":{"url":"python/functions.html","title":"函数/方法","keywords":"","body":"1.3.2. 常用方法&函数1.3.2. 常用方法&函数 repr - 将对象转化为共解释器读取的形式 >>>s = 'RUNOOB' >>> repr(s) \"'RUNOOB'\" >>> dict = {'runoob': 'runoob.com', 'google': 'google.com'}; >>> repr(dict) \"{'google': 'google.com', 'runoob': 'runoob.com'}\" >>> translate - 根据参数table给出的表（包含256个字符）转换字符串的字符，要过滤掉的字符放到deletechars参数中 1) intab = \"aeiou\" outtab = \"12345\" trantab = str.maketrans(intab, outtab) # 制作翻译表 str = \"this is string example....wow!!!\" print (str.translate(trantab)) >>> th3s 3s str3ng 2x1mpl2....w4w!!! 2) # 制作翻译表 bytes_tabtrans = bytes.maketrans(b'abcdefghijklmnopqrstuvwxyz', b'ABCDEFGHIJKLMNOPQRSTUVWXYZ') # 转换为大写，并删除字母o print(b'runoob'.translate(bytes_tabtrans, b'o')) fromkeys - 用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值 seq = ('Google', 'Runoob', 'Taobao') dict = dict.fromkeys(seq) print \"新字典为 : %s\" % str(dict) dict = dict.fromkeys(seq, 10) print \"新字典为 : %s\" % str(dict) >>> 新字典为 : {'Google': None, 'Taobao': None, 'Runoob': None} >>> 新字典为 : {'Google': 10, 'Taobao': 10, 'Runoob': 10} lanlangdeai            updated 2021-05-28 09:24:12 "},"python/cases.html":{"url":"python/cases.html","title":"示例","keywords":"","body":"1.3.3. 开发实战例子1.3.3.1.1. 处理特殊字符，将Unicode文本标准化1.3.3.1.2. 小数点精度计算1.3.3. 开发实战例子 1.3.3.1.1. 处理特殊字符，将Unicode文本标准化 import re import unicodedata s = 'T-shirt\\xa0\\xa0短袖圆领衫,\\u3000体恤衫\\xa0买一件\\t吧' s0 = re.sub('\\xa0', ' ', s) print(f's0: {s0}') s1 = ''.join(c for c in s if not unicodedata.combining(c)) print(f's1: {s1}') s2 = unicodedata.normalize('NFKC', s) print(f's2: {s2}') >>> s0: T-shirt 短袖圆领衫,　体恤衫 买一件 吧 >>> s1: T-shirt 短袖圆领衫,　体恤衫 买一件 吧 >>> s2: T-shirt 短袖圆领衫, 体恤衫 买一件 吧 1.3.3.1.2. 小数点精度计算 from decimal import Decimal, localcontext, getcontext a = 4.1 b = 5.329 print(a+b) # 9.428999999999998 a1 = Decimal(str(a)) b1 = Decimal(str(b)) print(a1+b1) # 9.429 a2 = Decimal(a) b2 = Decimal(b) with localcontext() as ctx: ctx.prec = 3 print(a2+b2) # 9.43 getcontext().prec = 1 print(a2+b2) # 9 # 注意Decimal的参数必须是字符串，不能是浮点型，否则误差依旧存在。 异常处理 import sys import traceback import logging logging.basicConfig(format='%(asctime)s [%(threadName)s: %(thread)d]' '%(pathname)s: %(funcName)s: %(lineno)d %(levelname)s - %(message)s', level=logging.DEBUG) def fun1(): raise Exception(\"func1 throw exception\") def main(): pass try: fun1() except Exception as e: print(e) traceback.print_exc(limit=2, file=sys.stdout) # 直接输出错误信息 logging.info(traceback.format_exc(limit=2)) # 错误信息以字符串的格式返回 >>>2021-07-07 16:41:40,374 [MainThread: 39204]E:/python_projects/test/except.py: main: 30 INFO - Traceback (most recent call last): File \"E:/python_projects/test/except.py\", line 20, in main fun1() File \"E:/python_projects/test/except.py\", line 14, in fun1 raise Exception(\"func1 throw exception\") Exception: func1 throw exception 4.耗时装饰器 import time def time_usage(func): def wrapper(*args, **kwargs): start = time.time() func(*args, **kwargs) end = time.time() used = end - start print(f'{func.__name__} used: {used}') return wrapper @time_usage def one(): time.sleep(3) one() lanlangdeai            updated 2021-09-24 11:15:04 "},"python/packages.html":{"url":"python/packages.html","title":"第三方包","keywords":"","body":"1.3.4. 第三方包1.3.4.1.1. fake-useragent (代理伪造，随机生成UA)1.3.4. 第三方包 1.3.4.1.1. fake-useragent (代理伪造，随机生成UA) 安装： pip install fake-useragent 使用： from fake_useragent import UserAgent ua = UserAgent() #ie浏览器的user agent print(ua.ie) #opera浏览器 print(ua.opera) #chrome浏览器 print(ua.chrome) #firefox浏览器 print(ua.firefox) #safri浏览器 print(ua.safari) #最常用的方式 #写爬虫最实用的是可以随意变换headers，一定要有随机性。支持随机生成请求头 print(ua.random) print(ua.random) print(ua.random) loguru(日志记录器)(https://github.com/Delgan/loguru) 安装： pip install loguru 使用： from loguru import logger # 输出到控制台 logger.debug('this is a debug') # 追加到文件 logger.add(\"file_{time}.log\") logger.debug(\"this is a debug for log\") # 日志时间滚动 logger.add(\"file_2.log\", rotation=\"12:00\") # 每天12:00会创建一个新的文件 logger.debug('this a rotation debug for log') 过了设定的时间，则将原来的 file_2.log 重命名，并添加一个新的 file_2.log 文件 #日志大小滚动 logger.add(\"file_1.log\", rotation=\"1 MB\") logger.debug('this is a size debug for log') #如果你不想删除原有日志文件，Loguru 还支持将日志直接压缩： logger.add(\"file_Y.log\", compression=\"zip\") # 压缩日志 #自定义颜色 logger.add(sys.stdout, colorize=True, format=\"{time} {message}\") #多进程安全 #Loguru 默认情况下是线程安全的，但它不是多进程安全的。不过如果你需要多进程/异步记录日志，它也能支持，只需要添加一个 enqueue 参数： logger.add(\"somefile.log\", enqueue=True) #支持traceback logger.add(\"out.log\", backtrace=True, diagnose=True) # Caution, may leak sensitive data in prod def func(a, b): return a / b def nested(c): try: func(5, c) except ZeroDivisionError: logger.exception(\"What?!\") nested(0) lanlangdeai            updated 2021-07-09 15:37:15 "},"golang/golang.html":{"url":"golang/golang.html","title":"Golang","keywords":"","body":"1.4. golang基础1.4. golang基础 官网：Downloads - The Go Programming Language (google.cn) 【安装】 1.下载包 wget https://golang.google.cn/dl/go1.16.8.linux-amd64.tar.gz 2.解压 tar -C /usr/local -zxvf go1.16.1.linux-amd64.tar.gz 【常用命令】 1.查看变量 go env 2.设置代理（由于默认是走国外，比较慢， 需要更换代理） go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct 其他代理： https://goproxy.io https://mirrors.aliyun.com/goproxy/ lanlangdeai            updated 2021-09-15 09:48:39 "},"linux/linux.html":{"url":"linux/linux.html","title":"Linux","keywords":"","body":"1.5. Linux常用命令1.5. Linux常用命令 1.执行上次某个命令 例如：上次执行的vim test.txt 打开某个文件，快捷操作： ！vim 2.执行上次的最后一部分 例如：vim test.txt 现在我只是想查看这个文件，快捷操作： cat !$ lanlangdeai            updated 2021-06-05 15:45:16 "},"linux/commands.html":{"url":"linux/commands.html","title":"常用命令","keywords":"","body":"1.5.1. 常用命令1.5.1.1. 1. 查看过期日志并删除1.5.1.2. 2. 查看Mac地址1.5.1.2.1. 3. 抑制空格和注释查看文件内容1.5.1. 常用命令 1.5.1.1. 1. 查看过期日志并删除 # 删除10天前文件 find -mtime +10 -name \"*.log\" -exec rm -rf {} \\; 1.5.1.2. 2. 查看Mac地址 cat /sys/class/net/eth0/address 1.5.1.2.1. 3. 抑制空格和注释查看文件内容 grep -v '^#\\|^$' /etc/default/ufw lanlangdeai            updated 2021-07-20 09:08:04 "},"linux/scripts.html":{"url":"linux/scripts.html","title":"常用脚本","keywords":"","body":"1.5.2. 常用脚本1.5.2. 常用脚本 守护进程 #!/bin/bash #守护进程 while true do c=`ps -ef | grep api/wx/deal_up_event | grep -v grep | wc -l` if [ $c -lt 1 ] then nohup php /www/wwwroot/SsCpc/index.php api/wx/deal_up_event > /dev/null 2>&1 & echo $! fi sleep 10 清理过期日志文件 #!/bin/bash # 删除超过10天，并且以.log结尾的文件 cd /data/www/tt2kj_feedback/common/runtime find -mtime +10 -name \"*.log\" -exec rm -rf {} \\; 3.nginx日志分割 #!/bin/bash dat=`date +\"%Y%m%d\" ` mon=`date +\"%Y%m\"` echo $dat nginx_path=\"/data/log/nginx/\" mondir=$nginx_path$mon /bin/echo $mondir if [ ! -x \"$mondir\" ]; then echo \"开始创建日期文件夹\" mkdir \"$mondir\" echo \"创建日期文件夹结束\" fi /bin/echo `date +\"%Y-%m-%d %H:%M:%S\"` /bin/echo ` ls -al $mondir` # 声明需要分割的日志文件 logs=(\"access_bi.inner.tt2kj.com_80\" \"access_kf.inner.tt2kj.com_80\" \"nginx_error\") for log_name in ${logs[@]} do echo $log_name mv $nginx_path$log_name\".log\" $mondir/$log_name-$dat\".log\" done kill -USR1 `cat /var/run/nginx.pid` /bin/echo \"done \" lanlangdeai            updated 2021-09-24 10:43:14 "},"linux/supervisor.html":{"url":"linux/supervisor.html","title":"Supervisor","keywords":"","body":"1.5.3. 进程管理工具之Supervisor1.5.3.1. 介绍1.5.3.2. 开启启动1.5.3. 进程管理工具之Supervisor 1.5.3.1. 介绍 ​ Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。 1.5.3.2. 开启启动 添加系统服务配置文件 vim /lib/systemd/system/supervisord.service 添加配置项 [Unit] Description=supervisord daemon [Service] Type=forking ExecStart=/bin/supervisord -c /etc/supervisord/supervisord.conf ExecReload=/bin/supervisorctl reload ExecStop=/bin/supervisorctl shutdown KillMode=process Restart=on-failure RestartSec=30s [Install] WantedBy=multi-user.target 说明与注意点 RestartSec: 开机多久之后启动 常用命令 a)开启服务 systemctl enable supervisord lanlangdeai            updated 2021-05-25 10:20:43 "},"mysql/mysql.html":{"url":"mysql/mysql.html","title":"MySQL","keywords":"","body":" lanlangdeai            updated 2021-05-24 18:22:29 "},"docker/docker.html":{"url":"docker/docker.html","title":"Docker","keywords":"","body":"1.7. Docker1.7.1. Docker镜像加速1.7.2. 常用命令1.7. Docker 1.7.1. Docker镜像加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json 1.7.2. 常用命令 -d 后台运行 --name=定义服务名称 -p 5800:5800 端口映射，宿主机端口：容器端口 --shm-size 1g 设置共享内存大小 -e DISPLAY_WIDTH=1366 设置环境变量 --privileged=true 享有特权 lanlangdeai            updated 2021-10-27 15:42:17 "},"apache/apache.html":{"url":"apache/apache.html","title":"Apache","keywords":"","body":" lanlangdeai            updated 2021-05-24 19:12:33 "},"nginx/nginx.html":{"url":"nginx/nginx.html","title":"Nginx","keywords":"","body":" lanlangdeai            updated 2021-05-24 19:13:13 "},"nginx/install.html":{"url":"nginx/install.html","title":"安装篇","keywords":"","body":"1.9.1. Nginx之安装篇1.9.1.1. 安装1.9.1.2. 设置开启启动1.9.1. Nginx之安装篇 1.9.1.1. 安装 1.9.1.2. 设置开启启动 添加系统服务配置文件 vim /lib/systemd/system/nginx.service 添加配置项 [Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/bin/nginx ExecReload=/bin/nginx -s reload ExecStop=/bin/nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target 说明与注意点 ``` Description:描述服务 After:描述服务类别 [Service]服务运行参数的设置 Type=forking是后台运行的形式 ExecStart为服务的具体运行命令 ExecReload为重启命令 ExecStop为停止命令 PrivateTmp=True表示给服务分配独立的临时空间 [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径 4. 常用命令 a)加入开机启动 systemctl enable nginx b)禁止开机启动 systemctl disable nginx c)启动服务 systemctl start nginx d)停止服务 systemctl stop nginx e)查看服务状态 systemctl status nginx f)查看所有已启动的服务 systemctl list-units -type=service ``` lanlangdeai            updated 2021-08-12 10:17:26 "},"nginx/config.html":{"url":"nginx/config.html","title":"配置篇","keywords":"","body":"1.9.2. 配置篇1.9.2.1. 配置语法1.9.2.2. 常用配置1.9.2. 配置篇 1.9.2.1. 配置语法 正则表达式匹配，其中： * ~ 为区分大小写匹配 * ~* 为不区分大小写匹配 * !~和!~*分别为区分大小写不匹配及不区分大小写不匹配 文件及目录匹配，其中： * -f和!-f用来判断是否存在文件 * -d和!-d用来判断是否存在目录 * -e和!-e用来判断是否存在文件或目录 * -x和!-x用来判断文件是否可执行 flag标记有： * last 相当于Apache里的[L]标记，表示完成rewrite * break 终止匹配, 不再匹配后面的规则 * redirect 返回302临时重定向 地址栏会显示跳转后的地址 * permanent 返回301永久重定向 地址栏会显示跳转后的地址 1.9.2.2. 常用配置 非www，默认跳转www地址 ```bash server { listen 80; server_name www.xxx.com xxx.com; if ($host != 'www.xxx.com') { rewrite ^/(.*)$ http://www.xxx.com/$1 permanent; } } permanent – 返回永久重定向的HTTP状态301 server { listen 80; server_name 123.com; rewrite ^/(.*) http://456.com/$1 redirect; access_log off; } redirect – 返回临时重定向的HTTP状态302 2. #### 生产环境基本配置 ```bash upstream common { server 127.0.0.1:5101; server 127.0.0.1:5102; } upstream search { server 172.16.114.52:5301; server 172.16.114.52:5302; } limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s; server { listen 80; server_name www.demo.com; return 301 https://www.demo.com$request_uri; } server { listen 443 ssl; server_name www.demo.com; ssl on; ssl_certificate /etc/nginx/ssl/demo.com.fullchain.cert; ssl_certificate_key /etc/nginx/ssl/demo.com.key; client_max_body_size 20m; -- 设置的不够大， 文件上传会出现413 Request Entity Too Large gzip on; limit_req zone=one burst=10; access_log /data0/varlog/nginx/www_demo.access.log main; error_log /data0/varlog/nginx/www_demo.error.log error; if ( $host != 'www.demo.com' ) { rewrite ^(.*)$ https://www.demo.com$1 permanent; } location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location ~* /fbmain/(common|account|monitor|history_crawl|user|pay|need) { proxy_pass_header Server; proxy_set_header Host $http_host; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://common; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location ~ /fbmain/search { proxy_pass_header Server; proxy_set_header Host $http_host; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://search; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location /static { root /data0/wwwroot/nuxt/main_monitor_flask; } location ~ /static/v1/auto_login { proxy_pass_header Server; proxy_set_header Host $http_host; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://127.0.0.1:5101; } } 3.禁止htaccess location ~//.ht { deny all; } 4.禁止访问多目录 location ~ ^/(cron|templates)/ { deny all; break; } 可以禁止/data/下多级目录下.log.txt等请求; location ~ ^/data { deny all; } 5.禁止单个目录 location /searchword/cron/ { deny all; } 单个文件 location ~ /data/sql/data.sql { deny all; } 设置过期时间 location = /robots.txt { allow all; log_not_found off; # 不记录404错误日志 access_log off; expires 99d; # 99天过期时间 } location = /favicon.ico { expires max; access_log off; log_not_found off; } 7.开启gzip压缩 gzip on; gzip_min_length 1k; gzip_comp_level 5; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_types text/css application/javascript image/png image/jpeg application/x-javascript text/javascript; gzip_disable \"MSIE [1-6].\"; gzip_vary on; 8.访问日志 http { ... log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_time\" \"$upstream_response_time\"'; } -- 这里注意 记录了request_time 和upstream_response_time 两个时间 request_time:指的就是从接受用户请求的第一个字节到发送完响应数据的时间，即包括接收请求数据时间、程序响应时间、输出响应数据时间。 upstream_response_time:是指从 nginx 向后端（php-cgi)建立连接开始到接受完数据然后关闭连接为止的时间。 9.非HTTP跳转https server { listen 80; server_name www.域名.com; rewrite ^(.*)$ https://${server_name}$1 permanent; } server { listen 443; server_name www.域名.com; root /home/wwwroot; ssl on; ssl_certificate /etc/nginx/certs/server.crt; ssl_certificate_key /etc/nginx/certs/server.key; .... } lanlangdeai            updated 2021-11-22 10:40:21 "},"elasticsearch/elasticsearch.html":{"url":"elasticsearch/elasticsearch.html","title":"Elasticsearch","keywords":"","body":" lanlangdeai            updated 2021-05-24 19:13:54 "},"memcache/memecache.html":{"url":"memcache/memecache.html","title":"Memcache","keywords":"","body":" lanlangdeai            updated 2021-05-24 19:14:13 "},"mongodb/mongodb.html":{"url":"mongodb/mongodb.html","title":"MongoDB","keywords":"","body":" lanlangdeai            updated 2021-05-24 19:14:37 "},"mongodb/scripts.html":{"url":"mongodb/scripts.html","title":"脚本汇总","keywords":"","body":"1.12.1. 脚本汇总1.12.1. 脚本汇总 管理MongoDB操作脚本 start() { /usr/bin/mongod --fork --config /etc/mongod.conf } stop() { /usr/bin/mongod --config /etc/mongod.conf --shutdown } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo \"Usage: $0 {start|stop|restart}\" exit 0 ;; esac exit 0 lanlangdeai            updated 2021-05-25 18:25:02 "},"redis/redis.html":{"url":"redis/redis.html","title":"Redis","keywords":"","body":" lanlangdeai            updated 2021-05-24 19:49:57 "},"nodejs/nodejs.html":{"url":"nodejs/nodejs.html","title":"Nodejs","keywords":"","body":"1.14. nodejs1.14. nodejs lanlangdeai            updated 2021-06-03 22:07:48 "},"nodejs/install.html":{"url":"nodejs/install.html","title":"安装篇","keywords":"","body":"1.14.1. 安装篇1.14.1.1. NODE1.14.1.2. NPM1.14.1.2.1. NPM加速1.14.1. 安装篇 1.14.1.1. NODE 【Yum】 # 1. Install a package with repository for your system: # On CentOS, install package centos-release-scl available in CentOS repository: $ sudo yum install centos-release-scl-rh # On RHEL, enable RHSCL repository for you system: $ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms # 2. Install the collection: $ sudo yum install rh-nodejs12 # 3. Start using software collections: $ scl enable rh-nodejs12 bash 说明：如果想安装其他的版本的Node， 直接替换后面的版本号即可 1.14.1.2. NPM Node.js 的依赖包管理生态系统 npm, 是世界上最大的生态系统开源库。 1.14.1.2.1. NPM加速 ​ 原因：npm 默认是从国外的源获取和下载包信息，有时甚至被墙，导致无法正常安装软件。 ​ 解决： ​ 在安装软件的时候使用--registry来注册镜像地址到国内的镜像（每次使用都需要指定国内的镜像） npm install gitbook-cli -g --registry=http://registry.npm.taobao.org 可以将国内镜像设置为默认的镜像源 npm config set registry=http://registry.npm.taobao.org 使用cnpm来替代npm npm install -g cnpm --registry=https://registry.npm.taobao.org * 安装完成之后就可以使用cnpm来进行相关软件的安装 cnpm install [name] lanlangdeai            updated 2021-12-13 17:44:06 "},"developer/developer.html":{"url":"developer/developer.html","title":"开发者工具","keywords":"","body":" lanlangdeai            updated 2021-06-05 10:01:27 "},"developer/webs.html":{"url":"developer/webs.html","title":"技术站点","keywords":"","body":"1.15.1. 常用站点（WEB）1.15.1.1. 技术类1.15.1. 常用站点（WEB） 1.15.1.1. 技术类 https://www.digitalocean.com/community 开发者社区，涵盖多种语言的交流教程：Docker，Python，React，Databases，Ansible，JavaScript，Kubernetes，WordPress，Linux Basics，Security lanlangdeai            updated 2021-06-05 12:05:41 "},"developer/softwares.html":{"url":"developer/softwares.html","title":"常用软件","keywords":"","body":" lanlangdeai            updated 2021-06-05 10:24:17 "},"developer/sources.html":{"url":"developer/sources.html","title":"资源库","keywords":"","body":"1.15.3. 资源库1.15.3. 资源库 IP查询服务 https://www.ipip.net lanlangdeai            updated 2021-06-05 18:07:37 "},"project/project.html":{"url":"project/project.html","title":"项目","keywords":"","body":"1.16. 项目1.16. 项目 lanlangdeai            updated 2021-06-18 10:29:41 "},"project/files.html":{"url":"project/files.html","title":"项目文件","keywords":"","body":"1.16.1. 项目文件1.16.1. 项目文件 .htaccess .htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。 .htaccess主要的作用有：URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。主要体现在伪静态的应用、图片防盗链、自定义404错误页面、阻止/允许特定IP/IP段、目录浏览与主页、禁止访问指定文件类型、文件密码保护等。 .htaccess的用途范围主要针对当前目录。 启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。 打开httpd.conf文件用文本编辑器打开后,查找 Options FollowSymLinks AllowOverride None 改为： Options FollowSymLinks AllowOverride All 示例： 1.阻止所有人访问该目录 deny from all .gitignore robots.txt lanlangdeai            updated 2021-06-05 18:34:49 "},"common/donate.html":{"url":"common/donate.html","title":"赞赏","keywords":"","body":"1.17. 赞赏1.17. 赞赏 本书由gitbook制作，提供 pdf, epub, mobi格式的下载。开源项目地址：Github 如果您从本书得到了一些收获，欢迎扫码赞赏我，您的支持会激励我创作更多优质内容。 lanlangdeai            updated 2021-05-24 18:23:19 "}}